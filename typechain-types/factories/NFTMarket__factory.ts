/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { NFTMarket, NFTMarketInterface } from "../NFTMarket";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "itemId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "sold",
        type: "bool",
      },
    ],
    name: "MarketItemCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "createMarketItem",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "itemId",
        type: "uint256",
      },
    ],
    name: "createMarketSale",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getItemsCreated",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getListingPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMarketItems",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMyNFTs",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526601c6bf5263400060045534801561001b57600080fd5b50600160008190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611997806100746000396000f3fe6080604052600436106100555760003560e01c806312e855851461005a57806329aa3a421461008557806358eb2df5146100b0578063629cb2e4146100cc578063c23b139e146100f7578063e8b08f0414610113575b600080fd5b34801561006657600080fd5b5061006f61013e565b60405161007c919061165c565b60405180910390f35b34801561009157600080fd5b5061009a610148565b6040516100a791906115ba565b60405180910390f35b6100ca60048036038101906100c591906112f6565b61046a565b005b3480156100d857600080fd5b506100e16107ce565b6040516100ee91906115ba565b60405180910390f35b610111600480360381019061010c91906112ba565b610b7e565b005b34801561011f57600080fd5b50610128610e37565b60405161013591906115ba565b60405180910390f35b6000600454905090565b6060600061015660016111eb565b9050600061016460026111eb565b8261016f9190611717565b90506000808267ffffffffffffffff8111156101b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156101ed57816020015b6101da61120f565b8152602001906001900390816101d25790505b50905060005b8481101561045f57600073ffffffffffffffffffffffffffffffffffffffff166005600060018461022491906116c1565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561044c5760006005600060018461028591906116c1565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff161515151581525050848681518110610430577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508480610446906117a5565b95505050505b8080610457906117a5565b9150506101f3565b508094505050505090565b600260005414156104b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a79061161c565b60405180910390fd5b6002600081905550600081116104fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f29061163c565b60405180910390fd5b600454341461053f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610536906115fc565b60405180910390fd5b61054960016111f9565b600061055560016111eb565b90506040518060e001604052808281526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815250600560008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016107369392919061153e565b600060405180830381600087803b15801561075057600080fd5b505af1158015610764573d6000803e3d6000fd5b50505050828473ffffffffffffffffffffffffffffffffffffffff16827f045dfa01dcba2b36aba1d3dc4a874f4b0c5d2fbeb8d2c4b34a7d88c8d8f929d13360008760006040516107b89493929190611575565b60405180910390a4506001600081905550505050565b606060006107dc60016111eb565b905060008060005b83811015610885573373ffffffffffffffffffffffffffffffffffffffff166005600060018461081491906116c1565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156108725760018361086f91906116c1565b92505b808061087d906117a5565b9150506107e4565b5060008267ffffffffffffffff8111156108c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561090157816020015b6108ee61120f565b8152602001906001900390816108e65790505b50905060005b84811015610b73573373ffffffffffffffffffffffffffffffffffffffff166005600060018461093791906116c1565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b605760006005600060018461099891906116c1565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff161515151581525050848681518110610b43577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250600185610b5b91906116c1565b945050505b8080610b6b906117a5565b915050610907565b508094505050505090565b60026000541415610bc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbb9061161c565b60405180910390fd5b6002600081905550600060056000838152602001908152602001600020600501549050600060056000848152602001908152602001600020600201549050813414610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b906115dc565b60405180910390fd5b6005600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610cc0573d6000803e3d6000fd5b508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3033846040518463ffffffff1660e01b8152600401610cfe9392919061153e565b600060405180830381600087803b158015610d1857600080fd5b505af1158015610d2c573d6000803e3d6000fd5b50505050336005600085815260200190815260200160002060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016005600085815260200190815260200160002060060160006101000a81548160ff021916908315150217905550610dbe60026111f9565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051600060405180830381858888f19350505050158015610e28573d6000803e3d6000fd5b50505060016000819055505050565b60606000610e4560016111eb565b90506000806004905060005b83811015610ef2573373ffffffffffffffffffffffffffffffffffffffff1660056000600184610e8191906116c1565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610edf57600183610edc91906116c1565b92505b8080610eea906117a5565b915050610e51565b5060008267ffffffffffffffff811115610f35577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610f6e57816020015b610f5b61120f565b815260200190600190039081610f535790505b50905060005b848110156111e0573373ffffffffffffffffffffffffffffffffffffffff1660056000600184610fa491906116c1565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156111cd5760006005600060018461100591906116c1565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1615151515815250508486815181106111b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506001856111c891906116c1565b945050505b80806111d8906117a5565b915050610f74565b508094505050505090565b600081600001549050919050565b6001816000016000828254019250508190555050565b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b60008135905061129f81611933565b92915050565b6000813590506112b48161194a565b92915050565b600080604083850312156112cd57600080fd5b60006112db85828601611290565b92505060206112ec858286016112a5565b9150509250929050565b60008060006060848603121561130b57600080fd5b600061131986828701611290565b935050602061132a868287016112a5565b925050604061133b868287016112a5565b9150509250925092565b60006113518383611492565b60e08301905092915050565b6113668161175d565b82525050565b6113758161174b565b82525050565b6113848161174b565b82525050565b600061139582611687565b61139f818561169f565b93506113aa83611677565b8060005b838110156113db5781516113c28882611345565b97506113cd83611692565b9250506001810190506113ae565b5085935050505092915050565b6113f18161176f565b82525050565b6114008161176f565b82525050565b60006114136041836116b0565b915061141e8261181d565b606082019050919050565b60006114366024836116b0565b915061144182611892565b604082019050919050565b6000611459601f836116b0565b9150611464826118e1565b602082019050919050565b600061147c601c836116b0565b91506114878261190a565b602082019050919050565b60e0820160008201516114a86000850182611520565b5060208201516114bb602085018261136c565b5060408201516114ce6040850182611520565b5060608201516114e1606085018261135d565b5060808201516114f4608085018261135d565b5060a082015161150760a0850182611520565b5060c082015161151a60c08501826113e8565b50505050565b6115298161179b565b82525050565b6115388161179b565b82525050565b6000606082019050611553600083018661137b565b611560602083018561137b565b61156d604083018461152f565b949350505050565b600060808201905061158a600083018761137b565b611597602083018661137b565b6115a4604083018561152f565b6115b160608301846113f7565b95945050505050565b600060208201905081810360008301526115d4818461138a565b905092915050565b600060208201905081810360008301526115f581611406565b9050919050565b6000602082019050818103600083015261161581611429565b9050919050565b600060208201905081810360008301526116358161144c565b9050919050565b600060208201905081810360008301526116558161146f565b9050919050565b6000602082019050611671600083018461152f565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006116cc8261179b565b91506116d78361179b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561170c5761170b6117ee565b5b828201905092915050565b60006117228261179b565b915061172d8361179b565b9250828210156117405761173f6117ee565b5b828203905092915050565b60006117568261177b565b9050919050565b60006117688261177b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006117b08261179b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156117e3576117e26117ee565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f506c65617365207375626d6974207468652061736b696e67207072696365206960008201527f6e206f7264657220746f20636f6d706c6574652074686973207075726368617360208201527f6500000000000000000000000000000000000000000000000000000000000000604082015250565b7f5072696365206d75737420626520657175616c20746f206c697374696e67207060008201527f7269636500000000000000000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f5072696365206d757374206265206174206c6561737420312077656900000000600082015250565b61193c8161174b565b811461194757600080fd5b50565b6119538161179b565b811461195e57600080fd5b5056fea2646970667358221220639cd13118f27c074c36cc32fb7997ea7da0f4c0acc2e972574a24f3d58982dd64736f6c63430008040033";

type NFTMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTMarket__factory extends ContractFactory {
  constructor(...args: NFTMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NFTMarket> {
    return super.deploy(overrides || {}) as Promise<NFTMarket>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): NFTMarket {
    return super.attach(address) as NFTMarket;
  }
  connect(signer: Signer): NFTMarket__factory {
    return super.connect(signer) as NFTMarket__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTMarketInterface {
    return new utils.Interface(_abi) as NFTMarketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTMarket {
    return new Contract(address, _abi, signerOrProvider) as NFTMarket;
  }
}
